{
  "{\"sourceRoot\":\"/Users/cybergulp/Desktop/GitHubRepository/gulp-project\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/cybergulp/Desktop/GitHubRepository/gulp-project\",\"filename\":\"/Users/cybergulp/Desktop/GitHubRepository/gulp-project/gulpfile.babel.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/cybergulp/Desktop/GitHubRepository/gulp-project\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/cybergulp/Desktop/GitHubRepository/gulp-project",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/cybergulp/Desktop/GitHubRepository/gulp-project",
      "filename": "/Users/cybergulp/Desktop/GitHubRepository/gulp-project/gulpfile.babel.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/cybergulp/Desktop/GitHubRepository/gulp-project",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/cybergulp/Desktop/GitHubRepository/gulp-project/gulpfile.babel.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/cybergulp/Desktop/GitHubRepository/gulp-project/gulpfile.babel.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/cybergulp/Desktop/GitHubRepository/gulp-project",
        "sourceFileName": "gulpfile.babel.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.detectChange = exports.watch = exports.reload = exports.serve = void 0;\n\nvar _gulp = _interopRequireDefault(require(\"gulp\"));\n\nvar _browserSync = _interopRequireDefault(require(\"browser-sync\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Step 0: import package from the node modules\n// Step 1: lets a create a browser-sync object\nvar server = _browserSync.default.create(); // Step 2: defines a variable for BrowserLoading the html files from base directory\n\n\nvar serve = function serve(done) {\n  server.init({\n    notify: false,\n    // disable the browser sync connected notification\n    // proxy: \"http://localhost/ecom-php\", // either by proxy url or\n    server: {\n      // from base directory url\n      baseDir: \"./src\",\n      browser: \"google chrome\"\n    }\n  });\n  done();\n}; // Step 3: reload the browser if any change is detected\n\n\nexports.serve = serve;\n\nvar reload = function reload(done) {\n  server.reload();\n  done();\n}; // Step 4: for automatically detecting our files change we can use watch\n\n\nexports.reload = reload;\n\nvar watch = function watch() {\n  // if a changed is detected then it will refresh the page\n  _gulp.default.watch('src/assets/styles/**/*.css', reload);\n\n  _gulp.default.watch('src/index.html', reload);\n\n  _gulp.default.watch('src/assets/scripts/**/*.js', reload);\n}; // now run 'gulp watch' to watch the task and ctrl+c to terminate the task\n// Step 5: run gulp detectChange for loading the task\n\n\nexports.watch = watch;\n\nvar detectChange = _gulp.default.series(serve, watch); //default defines the ease of access: only run gulp and enjoy the task\n\n\nexports.detectChange = detectChange;\nvar _default = detectChange;\nexports.default = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImd1bHBmaWxlLmJhYmVsLmpzIl0sIm5hbWVzIjpbInNlcnZlciIsImJyb3dzZXJTeW5jIiwiY3JlYXRlIiwic2VydmUiLCJkb25lIiwiaW5pdCIsIm5vdGlmeSIsImJhc2VEaXIiLCJicm93c2VyIiwicmVsb2FkIiwid2F0Y2giLCJndWxwIiwiZGV0ZWN0Q2hhbmdlIiwic2VyaWVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUE7Ozs7QUFEQTtBQUdBO0FBQ0EsSUFBTUEsTUFBTSxHQUFHQyxxQkFBWUMsTUFBWixFQUFmLEMsQ0FFQTs7O0FBQ08sSUFBTUMsS0FBSyxHQUFHLFNBQVJBLEtBQVEsQ0FBQ0MsSUFBRCxFQUFVO0FBQzlCSixFQUFBQSxNQUFNLENBQUNLLElBQVAsQ0FBWTtBQUNYQyxJQUFBQSxNQUFNLEVBQUcsS0FERTtBQUNLO0FBQ2hCO0FBQ0FOLElBQUFBLE1BQU0sRUFBRTtBQUFFO0FBQ0FPLE1BQUFBLE9BQU8sRUFBRSxPQURYO0FBRUVDLE1BQUFBLE9BQU8sRUFBRTtBQUZYO0FBSEcsR0FBWjtBQVFBSixFQUFBQSxJQUFJO0FBQ0osQ0FWTSxDLENBWVA7Ozs7O0FBQ08sSUFBTUssTUFBTSxHQUFHLFNBQVRBLE1BQVMsQ0FBQ0wsSUFBRCxFQUFVO0FBQy9CSixFQUFBQSxNQUFNLENBQUNTLE1BQVA7QUFDQUwsRUFBQUEsSUFBSTtBQUNKLENBSE0sQyxDQUtQOzs7OztBQUNPLElBQU1NLEtBQUssR0FBRyxTQUFSQSxLQUFRLEdBQU07QUFDMUI7QUFDQUMsZ0JBQUtELEtBQUwsQ0FBVyw0QkFBWCxFQUF5Q0QsTUFBekM7O0FBQ0FFLGdCQUFLRCxLQUFMLENBQVcsZ0JBQVgsRUFBNkJELE1BQTdCOztBQUNBRSxnQkFBS0QsS0FBTCxDQUFXLDRCQUFYLEVBQXlDRCxNQUF6QztBQUNBLENBTE0sQyxDQUtMO0FBRUY7Ozs7O0FBQ08sSUFBTUcsWUFBWSxHQUFHRCxjQUFLRSxNQUFMLENBQVlWLEtBQVosRUFBbUJPLEtBQW5CLENBQXJCLEMsQ0FFUDs7OztlQUNlRSxZIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9jeWJlcmd1bHAvRGVza3RvcC9HaXRIdWJSZXBvc2l0b3J5L2d1bHAtcHJvamVjdCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBndWxwIGZyb20gJ2d1bHAnO1xuLy8gU3RlcCAwOiBpbXBvcnQgcGFja2FnZSBmcm9tIHRoZSBub2RlIG1vZHVsZXNcbmltcG9ydCBicm93c2VyU3luYyBmcm9tICdicm93c2VyLXN5bmMnO1xuXG4vLyBTdGVwIDE6IGxldHMgYSBjcmVhdGUgYSBicm93c2VyLXN5bmMgb2JqZWN0XG5jb25zdCBzZXJ2ZXIgPSBicm93c2VyU3luYy5jcmVhdGUoKTtcblxuLy8gU3RlcCAyOiBkZWZpbmVzIGEgdmFyaWFibGUgZm9yIEJyb3dzZXJMb2FkaW5nIHRoZSBodG1sIGZpbGVzIGZyb20gYmFzZSBkaXJlY3RvcnlcbmV4cG9ydCBjb25zdCBzZXJ2ZSA9IChkb25lKSA9PiB7XG5cdHNlcnZlci5pbml0KHtcblx0XHRub3RpZnkgOiBmYWxzZSwgLy8gZGlzYWJsZSB0aGUgYnJvd3NlciBzeW5jIGNvbm5lY3RlZCBub3RpZmljYXRpb25cblx0XHQvLyBwcm94eTogXCJodHRwOi8vbG9jYWxob3N0L2Vjb20tcGhwXCIsIC8vIGVpdGhlciBieSBwcm94eSB1cmwgb3Jcblx0XHRzZXJ2ZXI6IHsgLy8gZnJvbSBiYXNlIGRpcmVjdG9yeSB1cmxcbiAgICAgICAgICAgIGJhc2VEaXI6IFwiLi9zcmNcIixcbiAgICAgICAgICAgIGJyb3dzZXI6IFwiZ29vZ2xlIGNocm9tZVwiXG4gICAgICAgIH1cblx0fSk7XG5cdGRvbmUoKTtcbn1cblxuLy8gU3RlcCAzOiByZWxvYWQgdGhlIGJyb3dzZXIgaWYgYW55IGNoYW5nZSBpcyBkZXRlY3RlZFxuZXhwb3J0IGNvbnN0IHJlbG9hZCA9IChkb25lKSA9PiB7XG5cdHNlcnZlci5yZWxvYWQoKTtcblx0ZG9uZSgpO1xufVxuXG4vLyBTdGVwIDQ6IGZvciBhdXRvbWF0aWNhbGx5IGRldGVjdGluZyBvdXIgZmlsZXMgY2hhbmdlIHdlIGNhbiB1c2Ugd2F0Y2hcbmV4cG9ydCBjb25zdCB3YXRjaCA9ICgpID0+IHtcbiAvLyBpZiBhIGNoYW5nZWQgaXMgZGV0ZWN0ZWQgdGhlbiBpdCB3aWxsIHJlZnJlc2ggdGhlIHBhZ2Vcblx0Z3VscC53YXRjaCgnc3JjL2Fzc2V0cy9zdHlsZXMvKiovKi5jc3MnLCByZWxvYWQpO1xuXHRndWxwLndhdGNoKCdzcmMvaW5kZXguaHRtbCcsIHJlbG9hZCk7XG5cdGd1bHAud2F0Y2goJ3NyYy9hc3NldHMvc2NyaXB0cy8qKi8qLmpzJywgcmVsb2FkKTtcbn0gLy8gbm93IHJ1biAnZ3VscCB3YXRjaCcgdG8gd2F0Y2ggdGhlIHRhc2sgYW5kIGN0cmwrYyB0byB0ZXJtaW5hdGUgdGhlIHRhc2tcblxuLy8gU3RlcCA1OiBydW4gZ3VscCBkZXRlY3RDaGFuZ2UgZm9yIGxvYWRpbmcgdGhlIHRhc2tcbmV4cG9ydCBjb25zdCBkZXRlY3RDaGFuZ2UgPSBndWxwLnNlcmllcyhzZXJ2ZSwgd2F0Y2gpO1xuXG4vL2RlZmF1bHQgZGVmaW5lcyB0aGUgZWFzZSBvZiBhY2Nlc3M6IG9ubHkgcnVuIGd1bHAgYW5kIGVuam95IHRoZSB0YXNrXG5leHBvcnQgZGVmYXVsdCBkZXRlY3RDaGFuZ2U7XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "gulpfile.babel.js"
      ],
      "names": [
        "server",
        "browserSync",
        "create",
        "serve",
        "done",
        "init",
        "notify",
        "baseDir",
        "browser",
        "reload",
        "watch",
        "gulp",
        "detectChange",
        "series"
      ],
      "mappings": ";;;;;;;AAAA;;AAEA;;;;AADA;AAGA;AACA,IAAMA,MAAM,GAAGC,qBAAYC,MAAZ,EAAf,C,CAEA;;;AACO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,IAAD,EAAU;AAC9BJ,EAAAA,MAAM,CAACK,IAAP,CAAY;AACXC,IAAAA,MAAM,EAAG,KADE;AACK;AAChB;AACAN,IAAAA,MAAM,EAAE;AAAE;AACAO,MAAAA,OAAO,EAAE,OADX;AAEEC,MAAAA,OAAO,EAAE;AAFX;AAHG,GAAZ;AAQAJ,EAAAA,IAAI;AACJ,CAVM,C,CAYP;;;;;AACO,IAAMK,MAAM,GAAG,SAATA,MAAS,CAACL,IAAD,EAAU;AAC/BJ,EAAAA,MAAM,CAACS,MAAP;AACAL,EAAAA,IAAI;AACJ,CAHM,C,CAKP;;;;;AACO,IAAMM,KAAK,GAAG,SAARA,KAAQ,GAAM;AAC1B;AACAC,gBAAKD,KAAL,CAAW,4BAAX,EAAyCD,MAAzC;;AACAE,gBAAKD,KAAL,CAAW,gBAAX,EAA6BD,MAA7B;;AACAE,gBAAKD,KAAL,CAAW,4BAAX,EAAyCD,MAAzC;AACA,CALM,C,CAKL;AAEF;;;;;AACO,IAAMG,YAAY,GAAGD,cAAKE,MAAL,CAAYV,KAAZ,EAAmBO,KAAnB,CAArB,C,CAEP;;;;eACeE,Y",
      "sourceRoot": "/Users/cybergulp/Desktop/GitHubRepository/gulp-project",
      "sourcesContent": [
        "import gulp from 'gulp';\n// Step 0: import package from the node modules\nimport browserSync from 'browser-sync';\n\n// Step 1: lets a create a browser-sync object\nconst server = browserSync.create();\n\n// Step 2: defines a variable for BrowserLoading the html files from base directory\nexport const serve = (done) => {\n\tserver.init({\n\t\tnotify : false, // disable the browser sync connected notification\n\t\t// proxy: \"http://localhost/ecom-php\", // either by proxy url or\n\t\tserver: { // from base directory url\n            baseDir: \"./src\",\n            browser: \"google chrome\"\n        }\n\t});\n\tdone();\n}\n\n// Step 3: reload the browser if any change is detected\nexport const reload = (done) => {\n\tserver.reload();\n\tdone();\n}\n\n// Step 4: for automatically detecting our files change we can use watch\nexport const watch = () => {\n // if a changed is detected then it will refresh the page\n\tgulp.watch('src/assets/styles/**/*.css', reload);\n\tgulp.watch('src/index.html', reload);\n\tgulp.watch('src/assets/scripts/**/*.js', reload);\n} // now run 'gulp watch' to watch the task and ctrl+c to terminate the task\n\n// Step 5: run gulp detectChange for loading the task\nexport const detectChange = gulp.series(serve, watch);\n\n//default defines the ease of access: only run gulp and enjoy the task\nexport default detectChange;\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1553466820000
  }
}