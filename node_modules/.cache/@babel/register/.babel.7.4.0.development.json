{
  "{\"sourceRoot\":\"/Users/cybergulp/Desktop/GitHubRepository/gulp-project\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/cybergulp/Desktop/GitHubRepository/gulp-project\",\"filename\":\"/Users/cybergulp/Desktop/GitHubRepository/gulp-project/gulpfile.babel.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/cybergulp/Desktop/GitHubRepository/gulp-project\",\"plugins\":[{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"loose\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ObjectMethod\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"ClassMethod\":{\"exit\":[null]},\"ClassPrivateMethod\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.4.0": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/cybergulp/Desktop/GitHubRepository/gulp-project",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/cybergulp/Desktop/GitHubRepository/gulp-project",
      "filename": "/Users/cybergulp/Desktop/GitHubRepository/gulp-project/gulpfile.babel.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/cybergulp/Desktop/GitHubRepository/gulp-project",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "loose": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectMethod": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/cybergulp/Desktop/GitHubRepository/gulp-project/gulpfile.babel.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/cybergulp/Desktop/GitHubRepository/gulp-project/gulpfile.babel.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/cybergulp/Desktop/GitHubRepository/gulp-project",
        "sourceFileName": "gulpfile.babel.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.build = exports.dev = exports.bundle = exports.bundleCSS = exports.bundleJS = exports.watch1 = exports.watchBundle = exports.styles = exports.finalDist = exports.scripts = exports.serveBundle = exports.serve1 = exports.watch = exports.copyFiles = exports.copy = exports.cleanBundle = exports.clean = exports.reload = exports.serve = exports.lint = void 0;\n\nvar _gulp = _interopRequireDefault(require(\"gulp\"));\n\nvar _browserSync = _interopRequireDefault(require(\"browser-sync\"));\n\nvar _del = _interopRequireDefault(require(\"del\"));\n\nvar _gulpUglifycss = _interopRequireDefault(require(\"gulp-uglifycss\"));\n\nvar _gulpEslint = _interopRequireDefault(require(\"gulp-eslint\"));\n\nvar _gulpConcat = _interopRequireDefault(require(\"gulp-concat\"));\n\nvar _gulpSourcemaps = _interopRequireDefault(require(\"gulp-sourcemaps\"));\n\nvar _gulpBabel = _interopRequireDefault(require(\"gulp-babel\"));\n\nvar _gulpUglify = _interopRequireDefault(require(\"gulp-uglify\"));\n\nvar _gulpRename = _interopRequireDefault(require(\"gulp-rename\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Step 0: import package from the node modules\n//import path from 'path';\n// uglify class\n// gulp eslint\n// for scripts task\nvar lint = function lint() {\n  return _gulp.default.src(['src/js/*.js']) // eslint() attaches the lint output to the \"eslint\" property\n  // of the file object so it can be used by other modules.\n  .pipe((0, _gulpEslint.default)()) // eslint.format() outputs the lint results to the console.\n  // Alternatively use eslint.formatEach() (see Docs).\n  .pipe(_gulpEslint.default.format()) // To have the process exit with an error code (1) on\n  // lint error, return the stream and pipe to failAfterError last.\n  .pipe(_gulpEslint.default.failAfterError());\n}; // Step 1: lets a create a browser-sync object\n\n\nexports.lint = lint;\n\nvar server = _browserSync.default.create(); // Step 2: defines a variable for BrowserLoading the html files from base directory\n\n\nvar serve = function serve(done) {\n  server.init({\n    notify: false,\n    // disable the browser sync connected notification\n    // proxy: \"http://localhost/ecom-php\", // either by proxy url or\n    server: {\n      // from base directory url\n      baseDir: \"./src\",\n      browser: \"google chrome\"\n    }\n  });\n  done();\n}; // Step 3: reload the browser if any change is detected\n\n\nexports.serve = serve;\n\nvar reload = function reload(done) {\n  server.reload();\n  done();\n};\n\nexports.reload = reload;\n\nvar clean = function clean() {\n  return (0, _del.default)(['dist']);\n};\n\nexports.clean = clean;\n\nvar cleanBundle = function cleanBundle() {\n  return (0, _del.default)(['bundle']);\n}; // for coping other files into our project directory\n\n\nexports.cleanBundle = cleanBundle;\n\nvar copy = function copy() {\n  return _gulp.default.src('src/**/*').pipe(_gulp.default.dest('dist'));\n};\n\nexports.copy = copy;\n\nvar copyFiles = function copyFiles() {\n  return _gulp.default.src('app/index.html').pipe(_gulp.default.dest('bundle'));\n}; // Step 4: for automatically detecting our files change we can use watch\n\n\nexports.copyFiles = copyFiles;\n\nvar watch = function watch() {\n  // if a changed is detected then it will refresh the page\n  _gulp.default.watch('src/assets/styles/**/*.css', reload);\n\n  _gulp.default.watch('src/index.html', reload);\n\n  _gulp.default.watch('src/assets/scripts/**/*.js', reload);\n}; // now run 'gulp watch' to watch the task and ctrl+c to terminate the task\n// now we can refactor our code a little bit by creating a object\n// const paths = {\n// \tstyles: {\n// \t\tsrc: ['src/assets/styles/*.*/*.css'], // we can pass multiple file in an array to process\n// \t\tdest: 'dist/assets/styles'\n// \t},\n//\n// \tscript: {\n// \t\tsrc: ['src/assets/scripts/*.*/*.js'],\n// \t\tdest: 'dist/assets/scripts'\n// \t},\n//\n// \timg: { //images source and dest with an object\n// \t\tsrc: 'src/assets/images/**/*.{jpg,jpeg,png,svg,gif}',\n// \t\tdest: 'dist/assets/images'\n//\n// \t},\n//\n// \tcopyfiles: { // copying files linke fonts etc other than js, css directory and its content\n// \t\tsrc: ['src/**/*', 'src/assets', 'src/assets/**/*','src/assets/{imgages,scripts,styles}/**/*'],\n// \t\tdest: 'dist'\n//\n// \t}\n// }\n// Step 2: defines a variable for BrowserLoading the html files from base directory\n\n\nexports.watch = watch;\n\nvar serve1 = function serve1(done) {\n  server.init({\n    notify: false,\n    // disable the browser sync connected notification\n    // proxy: \"http://localhost/ecom-php\", // either by proxy url or\n    server: {\n      // from base directory url\n      baseDir: \"./dist\",\n      browser: \"google chrome\"\n    }\n  });\n  done();\n}; // Step 2: defines a variable for BrowserLoading the html files from base directory\n\n\nexports.serve1 = serve1;\n\nvar serveBundle = function serveBundle(done) {\n  server.init({\n    notify: false,\n    // disable the browser sync connected notification\n    // proxy: \"http://localhost/ecom-php\", // either by proxy url or\n    server: {\n      // from base directory url\n      baseDir: \"./bundle\",\n      browser: \"google chrome\"\n    }\n  });\n  done();\n}; // General steps scripts task for bundling and minifying\n// A.Packages needed:\n// 1.gulp\n// 2.gulp-sourcemaps\n// 3.gulp-babel\n// 4.gulp-concat\n// 5.gulp-uglify\n// 6.gulp-rename\n//\n// B. import packageName(choose anything meaningful to the Packages) from 'package';\n// package is the exact name in the package.json file\n//\n// C.Define task as follows:\n// export const taskName(choose anything meaningful to the packagr) = () =>{ }\n// if it contains a return statement and if it does not contain any return statement us\n// (done) =>{\n// \tdone();\n// }\n//\n// D.Piping order:\n// 1.src()\n// 2.sourcemaps.init()\n// 3.babel()\n// 4.concat()\n// 5.sourcemaps.write()\n// 6.uglify()\n// 7.rename()\n// 8.dest()\n//\n// E. calling the task by\n// export const finaltaskName = gulp.series(a, b, gulp.parallel(c,d));\n//\n// F. Run the task in the terminal as:\n// gulp finaltaskName\n\n\nexports.serveBundle = serveBundle;\n\nvar scripts = function scripts() {\n  return _gulp.default.src(['src/js/js.js', 'src/js/js1.js', 'src/js/js2.js', 'src/js/js3.js']).pipe(_gulpSourcemaps.default.init()).pipe((0, _gulpBabel.default)()).pipe((0, _gulpConcat.default)('bundle.js')).pipe(_gulpSourcemaps.default.write()).pipe((0, _gulpUglify.default)()).pipe((0, _gulpRename.default)({\n    extname: '.min.js'\n  })).pipe(_gulp.default.dest('./bundle'));\n};\n\nexports.scripts = scripts;\n\nvar finalDist = _gulp.default.series(cleanBundle, _gulp.default.parallel(scripts, copyFiles), serve, watch);\n\nexports.finalDist = finalDist;\n\nvar styles = function styles() {\n  return _gulp.default.src(['src/css/normalize.css', 'src/css/1.css', 'src/css/2.css']).pipe((0, _gulpConcat.default)('main.css')).pipe((0, _gulpUglifycss.default)({\n    \"maxLineLen\": 80,\n    \"uglyComments\": true\n  })).pipe(_gulp.default.dest('./bundle'));\n}; // Step 4: for automatically detecting our files change we can use watch\n\n\nexports.styles = styles;\n\nvar watchBundle = function watchBundle() {\n  // if a changed is detected then it will refresh the page\n  _gulp.default.watch('bundle/**/*.css', reload);\n\n  _gulp.default.watch('bundle/index.html', reload);\n\n  _gulp.default.watch('bundle/**/*.js', reload);\n}; // now run 'gulp watch' to watch the task and ctrl+c to terminate the task\n// Step 4: for automatically detecting our files change we can use watch\n\n\nexports.watchBundle = watchBundle;\n\nvar watch1 = function watch1() {\n  // if a changed is detected then it will refresh the page\n  _gulp.default.watch('dist/assets/styles/**/*.css', reload);\n\n  _gulp.default.watch('dist/index.html', reload);\n\n  _gulp.default.watch('dist/assets/scripts/**/*.js', reload);\n}; // now run 'gulp watch' to watch the task and ctrl+c to terminate the task\n\n\nexports.watch1 = watch1;\n\nvar bundleJS = _gulp.default.series(cleanBundle, scripts, copyFiles, serveBundle, watchBundle);\n\nexports.bundleJS = bundleJS;\n\nvar bundleCSS = _gulp.default.series(cleanBundle, styles, copyFiles, serveBundle, watchBundle);\n\nexports.bundleCSS = bundleCSS;\n\nvar bundle = _gulp.default.series(cleanBundle, styles, scripts, copyFiles, serveBundle, watchBundle);\n\nexports.bundle = bundle;\n\nvar dev = _gulp.default.series(serve, watch); // run gulp dev for development environment\n\n\nexports.dev = dev;\n\nvar build = _gulp.default.series(clean, copy, serve1, watch1);\n\nexports.build = build;\nvar _default = dev; // Step 5: run gulp detectChange for loading the task\n// export const detectChange = gulp.series(serve, watch);\n//default defines the ease of access: only run gulp and enjoy the task\n// export default detectChange;\n\nexports.default = _default;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "gulpfile.babel.js"
      ],
      "names": [
        "lint",
        "gulp",
        "src",
        "pipe",
        "eslint",
        "format",
        "failAfterError",
        "server",
        "browserSync",
        "create",
        "serve",
        "done",
        "init",
        "notify",
        "baseDir",
        "browser",
        "reload",
        "clean",
        "cleanBundle",
        "copy",
        "dest",
        "copyFiles",
        "watch",
        "serve1",
        "serveBundle",
        "scripts",
        "sourcemaps",
        "write",
        "extname",
        "finalDist",
        "series",
        "parallel",
        "styles",
        "watchBundle",
        "watch1",
        "bundleJS",
        "bundleCSS",
        "bundle",
        "dev",
        "build"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/cybergulp/Desktop/GitHubRepository/gulp-project",
      "sourcesContent": [
        "import gulp from 'gulp';\n// Step 0: import package from the node modules\nimport browserSync from 'browser-sync';\n//import path from 'path';\nimport del from 'del';\n// uglify class\nimport uglifycss from 'gulp-uglifycss';\n// gulp eslint\nimport eslint from 'gulp-eslint';\n\n// for scripts task\nimport concat from 'gulp-concat';\nimport sourcemaps from 'gulp-sourcemaps';\nimport babel from 'gulp-babel';\nimport uglify from 'gulp-uglify';\nimport rename from 'gulp-rename';\n\nexport const lint = () => {\n    return gulp.src(['src/js/*.js'])\n        // eslint() attaches the lint output to the \"eslint\" property\n        // of the file object so it can be used by other modules.\n        .pipe(eslint())\n        // eslint.format() outputs the lint results to the console.\n        // Alternatively use eslint.formatEach() (see Docs).\n        .pipe(eslint.format())\n        // To have the process exit with an error code (1) on\n        // lint error, return the stream and pipe to failAfterError last.\n        .pipe(eslint.failAfterError());\n}\n\n\n\n// Step 1: lets a create a browser-sync object\nconst server = browserSync.create();\n\n// Step 2: defines a variable for BrowserLoading the html files from base directory\nexport const serve = (done) => {\n\tserver.init({\n\t\tnotify : false, // disable the browser sync connected notification\n\t\t// proxy: \"http://localhost/ecom-php\", // either by proxy url or\n\t\tserver: { // from base directory url\n            baseDir: \"./src\",\n            browser: \"google chrome\"\n        }\n\t});\n\tdone();\n}\n\n// Step 3: reload the browser if any change is detected\nexport const reload = (done) => {\n\tserver.reload();\n\tdone();\n}\n\nexport const clean = () => del(['dist']);\nexport const cleanBundle = () => del(['bundle']);\n\n// for coping other files into our project directory\nexport const copy = () => {\n\treturn gulp.src('src/**/*')\n\t\t\t.pipe(gulp.dest('dist'));\n}\nexport const copyFiles = () => {\n\treturn gulp.src('app/index.html')\n\t\t\t.pipe(gulp.dest('bundle'));\n}\n\n// Step 4: for automatically detecting our files change we can use watch\nexport const watch = () => {\n // if a changed is detected then it will refresh the page\n\tgulp.watch('src/assets/styles/**/*.css', reload);\n\tgulp.watch('src/index.html', reload);\n\tgulp.watch('src/assets/scripts/**/*.js', reload);\n} // now run 'gulp watch' to watch the task and ctrl+c to terminate the task\n\n\n\n// now we can refactor our code a little bit by creating a object\n// const paths = {\n// \tstyles: {\n// \t\tsrc: ['src/assets/styles/*.*/*.css'], // we can pass multiple file in an array to process\n// \t\tdest: 'dist/assets/styles'\n// \t},\n//\n// \tscript: {\n// \t\tsrc: ['src/assets/scripts/*.*/*.js'],\n// \t\tdest: 'dist/assets/scripts'\n// \t},\n//\n// \timg: { //images source and dest with an object\n// \t\tsrc: 'src/assets/images/**/*.{jpg,jpeg,png,svg,gif}',\n// \t\tdest: 'dist/assets/images'\n//\n// \t},\n//\n// \tcopyfiles: { // copying files linke fonts etc other than js, css directory and its content\n// \t\tsrc: ['src/**/*', 'src/assets', 'src/assets/**/*','src/assets/{imgages,scripts,styles}/**/*'],\n// \t\tdest: 'dist'\n//\n// \t}\n// }\n\n\n// Step 2: defines a variable for BrowserLoading the html files from base directory\nexport const serve1 = (done) => {\n\tserver.init({\n\t\tnotify : false, // disable the browser sync connected notification\n\t\t// proxy: \"http://localhost/ecom-php\", // either by proxy url or\n\t\tserver: { // from base directory url\n            baseDir: \"./dist\",\n            browser: \"google chrome\"\n        }\n\t});\n\tdone();\n}\n\n\n// Step 2: defines a variable for BrowserLoading the html files from base directory\nexport const serveBundle = (done) => {\n\tserver.init({\n\t\tnotify : false, // disable the browser sync connected notification\n\t\t// proxy: \"http://localhost/ecom-php\", // either by proxy url or\n\t\tserver: { // from base directory url\n            baseDir: \"./bundle\",\n            browser: \"google chrome\"\n        }\n\t});\n\tdone();\n}\n\n// General steps scripts task for bundling and minifying\n// A.Packages needed:\n// 1.gulp\n// 2.gulp-sourcemaps\n// 3.gulp-babel\n// 4.gulp-concat\n// 5.gulp-uglify\n// 6.gulp-rename\n//\n// B. import packageName(choose anything meaningful to the Packages) from 'package';\n// package is the exact name in the package.json file\n//\n// C.Define task as follows:\n// export const taskName(choose anything meaningful to the packagr) = () =>{ }\n// if it contains a return statement and if it does not contain any return statement us\n// (done) =>{\n// \tdone();\n// }\n//\n// D.Piping order:\n// 1.src()\n// 2.sourcemaps.init()\n// 3.babel()\n// 4.concat()\n// 5.sourcemaps.write()\n// 6.uglify()\n// 7.rename()\n// 8.dest()\n//\n// E. calling the task by\n// export const finaltaskName = gulp.series(a, b, gulp.parallel(c,d));\n//\n// F. Run the task in the terminal as:\n// gulp finaltaskName\n\nexport const scripts = () => {\n  return gulp.src(['src/js/js.js', 'src/js/js1.js', 'src/js/js2.js', 'src/js/js3.js'])\n              .pipe(sourcemaps.init())\n              .pipe(babel())\n              .pipe(concat('bundle.js'))\n              .pipe(sourcemaps.write())\n              .pipe(uglify())\n              .pipe(rename({ extname: '.min.js' }))\n              .pipe(gulp.dest('./bundle'));\n}\n\nexport const finalDist = gulp.series(cleanBundle, gulp.parallel(scripts, copyFiles), serve, watch);\n\nexport const styles = () => {\n  return gulp.src(['src/css/normalize.css', 'src/css/1.css', 'src/css/2.css'])\n              .pipe(concat('main.css'))\n\t\t\t\t\t\t\t.pipe(uglifycss({ \"maxLineLen\": 80, \"uglyComments\": true }))\n              .pipe(gulp.dest('./bundle'));\n}\n\n\n// Step 4: for automatically detecting our files change we can use watch\nexport const watchBundle = () => {\n // if a changed is detected then it will refresh the page\n\tgulp.watch('bundle/**/*.css', reload);\n\tgulp.watch('bundle/index.html', reload);\n\tgulp.watch('bundle/**/*.js', reload);\n} // now run 'gulp watch' to watch the task and ctrl+c to terminate the task\n\n\n// Step 4: for automatically detecting our files change we can use watch\nexport const watch1 = () => {\n // if a changed is detected then it will refresh the page\n\tgulp.watch('dist/assets/styles/**/*.css', reload);\n\tgulp.watch('dist/index.html', reload);\n\tgulp.watch('dist/assets/scripts/**/*.js', reload);\n} // now run 'gulp watch' to watch the task and ctrl+c to terminate the task\n\nexport const bundleJS = gulp.series(cleanBundle, scripts, copyFiles, serveBundle, watchBundle);\nexport const bundleCSS = gulp.series(cleanBundle, styles, copyFiles, serveBundle, watchBundle);\nexport const bundle = gulp.series(cleanBundle,  styles, scripts, copyFiles, serveBundle, watchBundle);\nexport const dev = gulp.series(serve, watch); // run gulp dev for development environment\nexport const build = gulp.series(clean, copy, serve1, watch1);\nexport default dev;\n\n// Step 5: run gulp detectChange for loading the task\n// export const detectChange = gulp.series(serve, watch);\n\n//default defines the ease of access: only run gulp and enjoy the task\n// export default detectChange;\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1553527354000
  }
}